# Establish preferences
set.seed(1)
# preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student)))
as.integer(if (length(p) == 0) {
100000000
} else {
p
})
}
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
# Each event needs one chaperone
# add_constraint(sum_expr(x[i, j], i = 1:n) >= 1, j = 1:m)
model
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
solution <-
result %>%
get_solution(x[i,j]) %>%
filter(value == 1L) %>%
select(i, j) %>%
inner_join(chaperones, by = "i") %>%
inner_join(capacityTbl, by = c("j" = "id")) %>%
left_join(cleanData, by = c("name", "event"))
solution
solution %>%
group_by(name) %>%
group_split() %>%
map_df(~{
..name <- .x$name %>% unique()
..events <- cleanData %>% filter(name == ..name) %>% pull(event)
..res <- .x$event %in% ..events
.x %>% bind_cols(tibble(in_perf = ..res))
}) %>%
filter(in_perf == FALSE)
solution
capacityTbl %>%
inner_join(
solution %>% group_by(event) %>% summarize(count = n())
) %>%
filter(count == 0)
capacityTbl %>%
inner_join(
solution %>% group_by(event) %>% summarize(count = n())
)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% write_csv("solutions.csv")
solution <-
result %>%
get_solution(x[i,j]) %>%
filter(value == 1L) %>%
select(i, j) %>%
inner_join(chaperones, by = "i") %>%
inner_join(capacityTbl, by = c("j" = "id")) %>%
left_join(cleanData, by = c("name", "event"))
solution
solution %>% group_by(name) %>% summarize(sum = points)
solution %>% group_by(name) %>% summarize(sum = sum(points))
solution %>% group_by(name) %>% summarize(sum = sum(points)) %>% filter(sum != 3)
solution %>% group_by(event)
solution %>% group_by(event) %>% summaize(count = n(), capacity = mean(capacity))
solution %>% group_by(event) %>% summarise(count = n(), capacity = mean(capacity))
solution %>% group_by(event) %>% summarise(count = n(), capacity = mean(capacity)) %>% filter(count > capacity)
# Observe name level breakdown
solution %>% group_by(name) %>% summarize(best = min(preference), worst = max(preference), avg = mean(preference))
# Observe name level breakdown
solution %>% group_by(name) %>% summarize(best = min(preference), worst = max(preference), avg = mean(preference)) %>% arrange(desc(best))
# Observe name level breakdown
linear <- solution %>% group_by(name) %>% summarize(best = min(preference), worst = max(preference), avg = mean(preference)) %>% arrange(desc(best))
# Vizualize preferences
library(ggplot2)
library(purrr)
library(dplyr)
library(ompr)
library(ompr.roi)
library(ROI.plugin.glpk)
# Number of students
n <- length(preference_data)
# Courses
m <- nrow(capacityTbl)
p <- capacityTbl$points
# Course capacity
# capacity <- rep.int(11, m)
# Establish preferences
set.seed(1)
# preference_data <- lapply(seq_len(n), function(x) sample(seq_len(m), 3))
preferences <- function(student) preference_data[[student]]
# the weight of a student choosing a course
# if the course is not among the preferences, the weight is -100000
weight <- function(student, course) {
p <- which(as.numeric(course) == preferences(as.numeric(student))) ^ 3
as.integer(if (length(p) == 0) {
100000000 ^ 3
} else {
p
})
}
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
# Each event needs one chaperone
# add_constraint(sum_expr(x[i, j], i = 1:n) >= 1, j = 1:m)
model
result <- solve_model(model, with_ROI(solver = "glpk", verbose = TRUE))
solution <-
result %>%
get_solution(x[i,j]) %>%
filter(value == 1L) %>%
select(i, j) %>%
inner_join(chaperones, by = "i") %>%
inner_join(capacityTbl, by = c("j" = "id")) %>%
left_join(cleanData, by = c("name", "event"))
exp <- solution %>% group_by(name) %>% summarize(best = min(preference), worst = max(preference), avg = mean(preference)) %>% arrange(desc(best))
linear
exp
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, lb = 0, ub = 1, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
add_variable
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, lb = 0, ub = 1L, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, lb = 0, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, lb = 0, ub = 1L, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m) %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = 1:n) # %>%
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
renv::snapshot()
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
solution %>% filter(name == "Savid Stone")
solution %>% filter(name == "David Stone")
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
solution %>% filter(name == "Brett AbigaÃ±a")
solution %>% filter(name == "Nick")
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
model
result
model
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% write_csv("solutions.csv")
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% write_csv("solutions.csv")
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
preference_data
m
n
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% group_by(event) %>% summarize(n = n())
solution %>% group_by(event) %>% summarize(n = n()) %>% arrange(desc(n))
solution %>% group_by(event) %>% summarize(n = n(), capacity = mean(capacity)) %>% arrange(desc(n))
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% group_by(event) %>% summarize(n = n(), capacity = mean(capacity)) %>% arrange(desc(n))
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% group_by(event) %>% summarize(n = n(), capacity = mean(capacity)) %>% arrange(desc(n))
solution %>% group_by(event) %>% summarize(n = n(), capacity = mean(capacity)) %>% arrange(desc(n)) %>% View()
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% filter(name == "Rachel Mansour")
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% filter(name == "Rachel Mansour")
req_points <- readxl::read_excel("Chap Preferences.xlsx", sheet = 3)
req_points
capacityTbl
cleanData
chaperones
req_points <- readxl::read_excel("Chap Preferences.xlsx", sheet = 3) %>% left_join(chaperones, by = "name")
readxl::read_excel("Chap Preferences.xlsx", sheet = 3)
req_points <- readxl::read_excel("Chap Preferences.xlsx", sheet = 3) %>% left_join(chaperones, by = "name")
req_points
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
model
model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m)
model
purrr::walk(
1:n,
~{
model <-
model %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = .x) # %>%
}
)
model
purrr::walk(
1:n,
~{
model <<-
model %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == 3, i = .x) # %>%
}
)
model
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
### Do all events have people ###
capacityTbl %>%
inner_join(
solution %>% group_by(event) %>% summarize(count = n())
) %>%
filter(count == 0)
matching %>% group_by(weight) %>% summarize(count = n()) %>% mutate(alloc = count / sum(count))
# Make sure no one breaches capacity
solution %>% group_by(event) %>% summarise(count = n(), capacity = mean(capacity)) %>% filter(count > capacity)
# Find people with less than 3 points
solution %>% group_by(name) %>% summarize(sum = sum(points)) %>% filter(sum != 3)
# Find people with less than 3 points
solution %>% group_by(name) %>% summarize(sum = sum(points))
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
# Find people with less than 3 points
solution %>% group_by(name) %>% summarize(sum = sum(points))
# Find people with less than 3 points
solution %>% group_by(name) %>% summarize(sum = sum(points)) %>% filter(sum != 3L)
solution
solution %>% write_csv("solutions.csv")
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution %>% write_csv("solutions.csv")
solution
solution %>% write_csv("solutions.csv")
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m)
model
for(.x in 1:n){
model <-
model %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == req_points %>% filter(i == .x) %>% pull(req_points), i = .x) # %>%
}
model
for(.x in 1:n){
print(.x)
model <-
model %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == req_points %>% filter(i == .x) %>% pull(req_points), i = .x) # %>%
}
model
# Optim Model
model <- MIPModel() %>%
# 1 iff student i is assigned to course m
add_variable(x[i, j], i = 1:n, j = 1:m, type = "binary") %>%
# maximize the preferences
set_objective(sum_expr(weight(i, j) * x[i, j], i = 1:n, j = 1:m), sense = "min") %>%
# we cannot exceed the capacity of a course
add_constraint(sum_expr(x[i, j], i = 1:n) <= capacity[j], j = 1:m)
for(.x in 1:n){
print(.x)
model <-
model %>%
# each student needs to be assigned to two course
add_constraint(sum_expr(x[i, j] * p[j], j = 1:m) == req_points %>% filter(i == .x) %>% pull(req_points), i = .x) # %>%
}
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
# Find people with less than 3 points
solution %>% group_by(name) %>% summarize(sum = sum(points)) %>% filter(sum != 3L)
mergeData
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
solution
asc <- solution
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
solution
asc
solution == asc
mergeData
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
arrange(desc(name)) %>% inner_join(capacityTbl, by = "event") %>% group_by(name) %>% arrange(preference, .by_group = TRUE)
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
inner_join(capacityTbl, by = "event") %>% group_by(name) %>% arrange(desc(name), preference, .by_group = TRUE)
mergeData
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
inner_join(capacityTbl, by = "event") %>% group_by(name) %>% arrange(name, preference, .by_group = TRUE)
mergeData
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
inner_join(capacityTbl, by = "event") %>% arrange(desc(name)) %>% group_by(name) %>% arrange(preference, .by_group = TRUE)
mergeData
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
inner_join(capacityTbl, by = "event") %>% arrange(name) %>% group_by(name) %>% arrange(preference, .by_group = TRUE)
mergeData
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
inner_join(capacityTbl, by = "event") %>% arrange(name, preference)
mergeData
mergeData <-
chaperoneData %>%
tidyr::gather("preference", "event", -Name) %>%
mutate(
preference = case_when(preference == "Please select your top preference from the drop-down list." ~ 1,
preference == "Second preference" ~ 2,
preference == "Third Preference" ~ 3,
preference == "Fourth Preference" ~ 4,
preference == "Fifth Preference" ~ 5,
preference == "Sixth Preference" ~ 6)
) %>%
rename(name = Name) %>%
inner_join(capacityTbl, by = "event") %>% arrange(desc(name), preference)
mergeData
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
asc
mergeData
chaperones
mergeData
ggplot(plot_data, aes(x = event, y = count, fill = weight)) +
geom_bar(stat = "identity") +
viridis::scale_fill_viridis(discrete = TRUE) +
geom_hline(yintercept = 11) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_data <-
matching %>%
mutate(course = factor(event), weight = factor(weight)) %>%
group_by(event, weight) %>%
summarise(count = n()) %>%
tidyr::complete(weight, fill = list(count = 0))
preference_data
mergeData
mergeData %>% group_by(name)
mergeData %>% group_by(name) %>% group_split()
source('~/gitRepos/ChaPerrone/testing.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
preference_data
mergeData %>% group_by(name) %>% group_split()
preference_data <- mergeData %>% group_by(name) %>% group_split() %>% rev() %>% map(~{.x$id})
preference_data <- mergeData %>% group_by(name) %>% group_split() %>% map(~{.x$id})
preference_data
preference_data <- mergeData %>% group_by(name) %>% group_split() %>% map(~{.x$id}) %>% rev()
preference_data
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
source('~/gitRepos/ChaPerrone/ChaperoningOptim.R', echo=TRUE)
